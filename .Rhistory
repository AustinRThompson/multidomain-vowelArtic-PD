table_groupDiff <- rbind(table_groupDiff, groupDiff)
table_conditionDiff <- rbind(table_conditionDiff, conditionDiff)
}
k <- k + 1
rm(groupDiff, conditionDiff, targetMeasure, targetModel)
}
conditionDiff <- summary(pairs(emms_condition)) %>%
dplyr::rename(stat.value = 7) %>%
dplyr::mutate(
Measure = targetMeasure,
sig = ifelse(p.value < alpha_s1, TRUE, FALSE),
stat = ifelse(df == "Inf",
paste0("z = "),
paste0("t = ")),
apa = paste0(Sex, ", ",
Group, ", ",
contrast, ": ",
stat, round(stat.value, digits = 2), ", ",
ifelse(p.value < .001, "p<.001", paste0("p=",round(p.value, digits = 3)))),
apa = gsub(pattern = "0[.]", replacement = ".", apa)) %>%
dplyr::relocate(Measure, .before = contrast)
models <- list.files(path = "Data/Models/Study 1/")
k <- 1
while (k <= NROW(models)) {
targetModel <- readRDS(file = paste0("Data/Models/Study 1/",models[k]))
targetMeasure <- paste0(targetModel@call[["formula"]][[2]])
# Compute EMMs for Group and Sex
emms_group <- emmeans(targetModel, ~ Group | Sex*condition)
emms_condition <- emmeans(targetModel, ~ condition | Sex*Group)
# Compare EMMs for Group and Sex
pairs(emms_group)
pairs(emms_condition)
# Compare EMMs for Group and Sex
groupDiff <- summary(pairs(emms_group)) %>%
dplyr::rename(stat.value = 7) %>%
dplyr::mutate(
Measure = targetMeasure,
sig = ifelse(p.value < alpha_s1, TRUE, FALSE),
stat = ifelse(df == "Inf",
paste0("z = "),
paste0("t = ")),
apa = paste0(Sex, ", ",
condition, ", ",
contrast, ": ",
stat, round(stat.value, digits = 2), ", ",
ifelse(p.value < .001, "p<.001", paste0("p=",round(p.value, digits = 3))))) %>%
dplyr::relocate(Measure, .before = contrast)
conditionDiff <- summary(pairs(emms_condition)) %>%
dplyr::rename(stat.value = 7) %>%
dplyr::mutate(
Measure = targetMeasure,
sig = ifelse(p.value < alpha_s1, TRUE, FALSE),
stat = ifelse(df == "Inf",
paste0("z = "),
paste0("t = ")),
apa = paste0(Sex, ", ",
Group, ", ",
contrast, ": ",
stat, round(stat.value, digits = 2), ", ",
ifelse(p.value < .001, "p<.001", paste0("p=",round(p.value, digits = 3)))),
apa = gsub(pattern = "0[.]", replacement = ".", apa)) %>%
dplyr::relocate(Measure, .before = contrast)
if (k == 1) {
table_groupDiff <- groupDiff
table_conditionDiff <- conditionDiff
} else {
table_groupDiff <- rbind(table_groupDiff, groupDiff)
table_conditionDiff <- rbind(table_conditionDiff, conditionDiff)
}
k <- k + 1
rm(groupDiff, conditionDiff, targetMeasure, targetModel)
}
models <- list.files(path = "Data/Models/Study 1/")
k <- 1
while (k <= NROW(models)) {
targetModel <- readRDS(file = paste0("Data/Models/Study 1/",models[k]))
targetMeasure <- paste0(targetModel@call[["formula"]][[2]])
# Compute EMMs for Group and Sex
emms_group <- emmeans(targetModel, ~ Group | Sex*condition)
emms_condition <- emmeans(targetModel, ~ condition | Sex*Group)
# Compare EMMs for Group and Sex
pairs(emms_group)
pairs(emms_condition)
# Compare EMMs for Group and Sex
groupDiff <- summary(pairs(emms_group)) %>%
dplyr::rename(stat.value = 7) %>%
dplyr::mutate(
Measure = targetMeasure,
sig = ifelse(p.value < alpha_s1, TRUE, FALSE),
stat = ifelse(df == "Inf",
paste0("z = "),
paste0("t = ")),
apa = paste0(Sex, ", ",
condition, ", ",
contrast, ": ",
stat, round(stat.value, digits = 2), ", ",
ifelse(p.value < .001, "p<.001", paste0("p=",round(p.value, digits = 3)))),
apa = gsub(pattern = "0[.]", replacement = ".", apa)) %>%
dplyr::relocate(Measure, .before = contrast)
conditionDiff <- summary(pairs(emms_condition)) %>%
dplyr::rename(stat.value = 7) %>%
dplyr::mutate(
Measure = targetMeasure,
sig = ifelse(p.value < alpha_s1, TRUE, FALSE),
stat = ifelse(df == "Inf",
paste0("z = "),
paste0("t = ")),
apa = paste0(Sex, ", ",
Group, ", ",
contrast, ": ",
stat, round(stat.value, digits = 2), ", ",
ifelse(p.value < .001, "p<.001", paste0("p=",round(p.value, digits = 3)))),
apa = gsub(pattern = "0[.]", replacement = ".", apa)) %>%
dplyr::relocate(Measure, .before = contrast)
if (k == 1) {
table_groupDiff <- groupDiff
table_conditionDiff <- conditionDiff
} else {
table_groupDiff <- rbind(table_groupDiff, groupDiff)
table_conditionDiff <- rbind(table_conditionDiff, conditionDiff)
}
k <- k + 1
rm(groupDiff, conditionDiff, targetMeasure, targetModel)
}
models <- list.files(path = "Data/Models/Study 1/")
k <- 1
while (k <= NROW(models)) {
targetModel <- readRDS(file = paste0("Data/Models/Study 1/",models[k]))
targetMeasure <- paste0(targetModel@call[["formula"]][[2]])
# Compute EMMs for Group and Sex
emms_group <- emmeans(targetModel, ~ Group | Sex*condition)
emms_condition <- emmeans(targetModel, ~ condition | Sex*Group)
# Compare EMMs for Group and Sex
pairs(emms_group)
pairs(emms_condition)
# Compare EMMs for Group and Sex
groupDiff <- summary(pairs(emms_group)) %>%
dplyr::rename(stat.value = 7) %>%
dplyr::mutate(
Measure = targetMeasure,
sig = ifelse(p.value < alpha_s1, TRUE, FALSE),
stat = ifelse(df == "Inf",
paste0("z="),
paste0("t=")),
apa = paste0(Sex, ", ",
condition, ", ",
contrast, ": ",
stat, round(stat.value, digits = 2), ", ",
ifelse(p.value < .001, "p<.001", paste0("p=",round(p.value, digits = 3)))),
apa = gsub(pattern = "0[.]", replacement = ".", apa)) %>%
dplyr::relocate(Measure, .before = contrast)
conditionDiff <- summary(pairs(emms_condition)) %>%
dplyr::rename(stat.value = 7) %>%
dplyr::mutate(
Measure = targetMeasure,
sig = ifelse(p.value < alpha_s1, TRUE, FALSE),
stat = ifelse(df == "Inf",
paste0("z = "),
paste0("t = ")),
apa = paste0(Sex, ", ",
Group, ", ",
contrast, ": ",
stat, round(stat.value, digits = 2), ", ",
ifelse(p.value < .001, "p<.001", paste0("p=",round(p.value, digits = 3)))),
apa = gsub(pattern = "0[.]", replacement = ".", apa)) %>%
dplyr::relocate(Measure, .before = contrast)
if (k == 1) {
table_groupDiff <- groupDiff
table_conditionDiff <- conditionDiff
} else {
table_groupDiff <- rbind(table_groupDiff, groupDiff)
table_conditionDiff <- rbind(table_conditionDiff, conditionDiff)
}
k <- k + 1
rm(groupDiff, conditionDiff, targetMeasure, targetModel)
}
models <- list.files(path = "Data/Models/Study 1/")
k <- 1
while (k <= NROW(models)) {
targetModel <- readRDS(file = paste0("Data/Models/Study 1/",models[k]))
targetMeasure <- paste0(targetModel@call[["formula"]][[2]])
# Compute EMMs for Group and Sex
emms_group <- emmeans(targetModel, ~ Group | Sex*condition)
emms_condition <- emmeans(targetModel, ~ condition | Sex*Group)
# Compare EMMs for Group and Sex
pairs(emms_group)
pairs(emms_condition)
# Compare EMMs for Group and Sex
groupDiff <- summary(pairs(emms_group)) %>%
dplyr::rename(stat.value = 7) %>%
dplyr::mutate(
Measure = targetMeasure,
sig = ifelse(p.value < alpha_s1, TRUE, FALSE),
stat = ifelse(df == "Inf",
paste0("z="),
paste0("t=")),
apa = paste0(Sex, ", ",
condition, ", ",
contrast, ": ",
stat, round(stat.value, digits = 2), ", ",
ifelse(p.value < .001, "p<.001", paste0("p=",round(p.value, digits = 3)))),
apa = gsub(pattern = "0[.]", replacement = ".", apa)) %>%
dplyr::relocate(Measure, .before = contrast)
conditionDiff <- summary(pairs(emms_condition)) %>%
dplyr::rename(stat.value = 7) %>%
dplyr::mutate(
Measure = targetMeasure,
sig = ifelse(p.value < alpha_s1, TRUE, FALSE),
stat = ifelse(df == "Inf",
paste0("z="),
paste0("t=")),
apa = paste0(Sex, ", ",
Group, ", ",
contrast, ": ",
stat, round(stat.value, digits = 2), ", ",
ifelse(p.value < .001, "p<.001", paste0("p=",round(p.value, digits = 3)))),
apa = gsub(pattern = "0[.]", replacement = ".", apa)) %>%
dplyr::relocate(Measure, .before = contrast)
if (k == 1) {
table_groupDiff <- groupDiff
table_conditionDiff <- conditionDiff
} else {
table_groupDiff <- rbind(table_groupDiff, groupDiff)
table_conditionDiff <- rbind(table_conditionDiff, conditionDiff)
}
k <- k + 1
rm(groupDiff, conditionDiff, targetMeasure, targetModel)
}
.05/8
aiMeasures <- rio::import(file = "Data/PreppedData/CollatedData/TargetMeasures_aiMeasures.csv")  %>%
dplyr::mutate(Sex = factor(Sex, levels = c("M","F")),
condition = factor(condition,
levels = c("conv",
"moreClear",
"lessClear")))
modelData <- aiMeasures
# Taking out the trash
rm(aiMeasures)
# Building the model
F2_Slope_m0 <- lmerTest::lmer(F2_Slope ~ 1 +
(1 | StudyID),
data = modelData)
# Model summary
summary(F2_Slope_m0)
# Building the model
F2_Slope_m1 <- lmerTest::lmer(F2_Slope ~ condition +
(1 | StudyID),
data = modelData)
# Model summary
summary(F2_Slope_m1)
# Perform likelihood ratio test
anova(F2_Slope_m0, F2_Slope_m1)
# Building the model
F2_Slope_m2 <- lmerTest::lmer(F2_Slope ~ condition*Group +
(1 | StudyID),
data = modelData)
# Model summary
summary(F2_Slope_m2)
# Perform likelihood ratio test
anova(F2_Slope_m1, F2_Slope_m2)
# Building the model
F2_Slope_m3 <- lmerTest::lmer(F2_Slope ~ condition*Group*Sex +
(1 | StudyID),
data = modelData)
# Model summary
summary(F2_Slope_m3)
# Perform likelihood ratio test
anova(F2_Slope_m2, F2_Slope_m3)
F2_Slope_finalModel <- F2_Slope_m3
summary(F2_Slope_finalModel)
# Compute EMMs for Group and Sex
emms_group <- emmeans(F2_Slope_finalModel, ~ Group | Sex*condition)
emms_condition <- emmeans(F2_Slope_finalModel, ~ condition | Sex*Group)
# APA Reporting
apa_s1_emmPairs(pairs(emms_group),
sex = "F",
Condition = "conv")
apa_s1_emmPairs(pairs(emms_group),
sex = "M",
Condition = "conv")
# Saving the model
base::saveRDS(
object = F2_Slope_finalModel,
file = "Data/Models/Study 1/F2_Slope_finalModel.rds")
# Taking out the trash
rm(list=ls(pattern="^F2_Slope_m"))
rm(list=ls(pattern="^emms"))
rm(modelData)
vsaMeasures <- rio::import(file = "Data/PreppedData/CollatedData/TargetMeasures_vsaMeasures.csv")  %>%
dplyr::mutate(Sex = factor(Sex, levels = c("M","F")),
condition = factor(condition,
levels = c("conv",
"moreClear",
"lessClear")))
modelData <- vsaMeasures
# Taking out the trash
rm(vsaMeasures)
# Building the model
kVSA_m0 <- stats::lm(kVSA ~ 1,
data = modelData)
# Model summary
summary(kVSA_m0)
# Building the model
kVSA_m1 <- stats::lm(kVSA ~ condition,
data = modelData)
# Model summary
summary(kVSA_m1)
# Perform likelihood ratio test
anova(kVSA_m0, kVSA_m1)
# Building the model
kVSA_m2 <- stats::lm(kVSA ~ condition*Group,
data = modelData)
# Model summary
summary(kVSA_m2)
# Perform likelihood ratio test
anova(kVSA_m1, kVSA_m2)
# Building the model
kVSA_m3 <- lmerTest::lmer(kVSA ~ condition*Group*Sex +
(1|StudyID),
data = modelData)
# Model summary
summary(kVSA_m3)
# Perform likelihood ratio test
anova(kVSA_m2, kVSA_m3)
kVSA_finalModel <- kVSA_m3
summary(kVSA_finalModel)
# Saving the model
base::saveRDS(
object = kVSA_finalModel,
file = "Data/Models/Study 1/kVSA_finalModel.rds")
# Taking out the trash
rm(list=ls(pattern="^kVSA_m"))
rm(list=ls(pattern="^emms"))
rm(modelData)
aiMeasures <- rio::import(file = "Data/PreppedData/CollatedData/TargetMeasures_aiMeasures.csv")  %>%
dplyr::mutate(Sex = factor(Sex, levels = c("M","F")),
condition = factor(condition,
levels = c("conv",
"moreClear",
"lessClear")))
modelData <- aiMeasures
# Taking out the trash
rm(aiMeasures)
# Building the model
kinDistance_m0 <- lmerTest::lmer(kinDistance ~ 1 +
(1 | StudyID),
data = modelData)
# Model summary
summary(kinDistance_m0)
# Building the model
kinDistance_m1 <- lmerTest::lmer(kinDistance ~ condition +
(1 | StudyID),
data = modelData)
# Model summary
summary(kinDistance_m1)
# Perform likelihood ratio test
anova(kinDistance_m0, kinDistance_m1)
# Building the model
kinDistance_m2 <- lmerTest::lmer(kinDistance ~ condition*Group +
(1 | StudyID),
data = modelData)
# Model summary
summary(kinDistance_m2)
# Perform likelihood ratio test
anova(kinDistance_m1, kinDistance_m2)
# Building the model
kinDistance_m3 <- lmerTest::lmer(kinDistance ~ condition*Group*Sex +
(1 | StudyID),
data = modelData)
# Model summary
summary(kinDistance_m3)
# Perform likelihood ratio test
anova(kinDistance_m2, kinDistance_m3)
kinDistance_finalModel <- kinDistance_m3
summary(kinDistance_finalModel)
# Saving the model
base::saveRDS(
object = kinDistance_finalModel,
file = "Data/Models/Study 1/kinDistance_finalModel.rds")
# Taking out the trash
rm(list=ls(pattern="^kinDistance_m"))
rm(list=ls(pattern="^emms"))
rm(modelData)
aiMeasures <- rio::import(file = "Data/PreppedData/CollatedData/TargetMeasures_aiMeasures.csv")  %>%
dplyr::mutate(Sex = factor(Sex, levels = c("M","F")),
condition = factor(condition,
levels = c("conv",
"moreClear",
"lessClear")))
modelData <- aiMeasures
# Taking out the trash
rm(aiMeasures)
# Building the model
TB_speedMax_m1 <- lmerTest::lmer(TB_speedMax ~ condition +
(1 | StudyID),
data = modelData)
# Model summary
summary(TB_speedMax_m1)
# Perform likelihood ratio test
anova(TB_speedMax_m0, TB_speedMax_m1)
# Building the model
TB_speedMax_m2 <- lmerTest::lmer(TB_speedMax ~ condition*Group +
(1 | StudyID),
data = modelData)
# Model summary
summary(TB_speedMax_m2)
# Perform likelihood ratio test
anova(TB_speedMax_m1, TB_speedMax_m2)
# Building the model
TB_speedMax_m3 <- lmerTest::lmer(TB_speedMax ~ condition*Group*Sex +
(1 | StudyID),
data = modelData)
# Model summary
summary(TB_speedMax_m3)
# Perform likelihood ratio test
anova(dTB_speedMax_m2, dTB_speedMax_m3)
TB_speedMax_finalModel <- TB_speedMax_m3
summary(TB_speedMax_finalModel)
# Saving the model
base::saveRDS(
object = TB_speedMax_finalModel,
file = "Data/Models/Study 1/TB_speedMax_finalModel.rds")
# Taking out the trash
rm(list=ls(pattern="^dTB_speedMax_m"))
rm(list=ls(pattern="^emms"))
rm(modelData)
models <- list.files(path = "Data/Models/Study 1/")
k <- 1
while (k <= NROW(models)) {
targetModel <- readRDS(file = paste0("Data/Models/Study 1/",models[k]))
targetMeasure <- paste0(targetModel@call[["formula"]][[2]])
# Compute EMMs for Group and Sex
emms_group <- emmeans(targetModel, ~ Group | Sex*condition)
emms_condition <- emmeans(targetModel, ~ condition | Sex*Group)
# Compare EMMs for Group and Sex
pairs(emms_group)
pairs(emms_condition)
# Compare EMMs for Group and Sex
groupDiff <- summary(pairs(emms_group)) %>%
dplyr::rename(stat.value = 7) %>%
dplyr::mutate(
Measure = targetMeasure,
sig = ifelse(p.value < alpha_s1, TRUE, FALSE),
stat = ifelse(df == "Inf",
paste0("z="),
paste0("t=")),
apa = paste0(Sex, ", ",
condition, ", ",
contrast, ": ",
stat, round(stat.value, digits = 2), ", ",
ifelse(p.value < .001, "p<.001", paste0("p=",round(p.value, digits = 3)))),
apa = gsub(pattern = "0[.]", replacement = ".", apa)) %>%
dplyr::relocate(Measure, .before = contrast)
conditionDiff <- summary(pairs(emms_condition)) %>%
dplyr::rename(stat.value = 7) %>%
dplyr::mutate(
Measure = targetMeasure,
sig = ifelse(p.value < alpha_s1, TRUE, FALSE),
stat = ifelse(df == "Inf",
paste0("z="),
paste0("t=")),
apa = paste0(Sex, ", ",
Group, ", ",
contrast, ": ",
stat, round(stat.value, digits = 2), ", ",
ifelse(p.value < .001, "p<.001", paste0("p=",round(p.value, digits = 3)))),
apa = gsub(pattern = "0[.]", replacement = ".", apa)) %>%
dplyr::relocate(Measure, .before = contrast)
if (k == 1) {
table_groupDiff <- groupDiff
table_conditionDiff <- conditionDiff
} else {
table_groupDiff <- rbind(table_groupDiff, groupDiff)
table_conditionDiff <- rbind(table_conditionDiff, conditionDiff)
}
k <- k + 1
rm(groupDiff, conditionDiff, targetMeasure, targetModel)
}
vsaMeasures <- rio::import(file = "Data/PreppedData/CollatedData/TargetMeasures_vsaMeasures.csv") %>%
#dplyr::filter(condition == "conv") %>%
dplyr::mutate(Sex = factor(Sex, levels = c("M","F")),
condition = factor(condition,
levels = c("conv",
"moreClear",
"lessClear")),
aVSA = aVSA/1000)
modelData <- vsaMeasures
# Taking out the trash
rm(vsaMeasures)
# Building the model
aVSA_m0 <- lmerTest::lmer(aVSA ~ 1 +
(1 | StudyID),
data = modelData)
# Model summary
summary(aVSA_m0)
# Building the model
aVSA_m1 <- lmerTest::lmer(aVSA ~ condition +
(1 | StudyID),
data = modelData)
# Model summary
summary(aVSA_m1)
# Perform likelihood ratio test
anova(aVSA_m0, aVSA_m1)
# Building the model
aVSA_m2 <- lmerTest::lmer(aVSA ~ condition*Group +
(1 | StudyID),
data = modelData)
# Model summary
summary(aVSA_m2)
# Perform likelihood ratio test
anova(aVSA_m1, aVSA_m2)
0.037662 < alpha_s1
