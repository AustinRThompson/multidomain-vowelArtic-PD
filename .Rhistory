# Building the model
aVSA_m3 <- lmerTest::lmer(aVSA ~ condition*Group*Sex +
(1 | StudyID),
data = modelData)
# Model summary
summary(aVSA_m3)
# Perform likelihood ratio test
anova(aVSA_m2, aVSA_m3)
aVSA_finalModel <- aVSA_m3
summary(aVSA_finalModel)
# Compute EMMs for Group and Sex
emms_group <- emmeans(aVSA_finalModel, ~ Group | Sex*condition)
emms_condition <- emmeans(aVSA_finalModel, ~ condition | Sex*Group)
# Compare EMMs for Group and Sex
pairs(emms_group)
apa_s1_emmPairs(pairs(emms_group),
sex = "M",
Condition = "conv")
# APA Reporting
apa_s1_emmPairs(pairs(emms_group),
sex = "F",
Condition = "conv")
# Compute EMMs for Group and Sex
emms_group <- emmeans(aVSA_finalModel, ~ Group | Sex*condition)
emms_condition <- emmeans(aVSA_finalModel, ~ condition | Sex*Group)
# APA Reporting
apa_s1_emmPairs(pairs(emms_group),
sex = "F",
Condition = "conv")
pairs(emms_group)
View(apa_s1_emmPairs)
output <- paste(
sex,
", HC - PD: (",
"t(",
round(summary_table$df, digits = 2),
")=",
as.numeric(round(summary_table$t.ratio, 2)),
", ",
p,
")",
sep = "")
apa_s1_emmPairs <- function(emmsPair, sex, Condition) {
summary_table <- summary(emmsPair, infer = TRUE) %>%
dplyr::filter(Sex == sex) %>%
dplyr::filter(condition == Condition)
if(summary_table$p.value < .001) {
p <- "p<.001"
} else {
p <- paste0("p=",
round(summary_table$p.value, digits = 3))
}
output <- paste(
sex,
", HC - PD: (",
"t(",
round(summary_table$df, digits = 2),
")=",
as.numeric(round(summary_table$t.ratio, 2)),
", ",
p,
")",
sep = "")
return(output)
}
apa_s1_emmPairs <- function(emmsPair, sex, Condition) {
summary_table <- summary(emmsPair, infer = TRUE) %>%
dplyr::filter(Sex == sex) %>%
dplyr::filter(condition == Condition)
if(summary_table$p.value < .001) {
p <- "p<.001"
} else {
p <- paste0("p=",
round(summary_table$p.value, digits = 3))
}
if("t.ratio" %in% colnames(summary_table)) {
output <- paste(
sex,
", HC - PD: (",
"t(",
round(summary_table$df, digits = 2),
")=",
as.numeric(round(summary_table$t.ratio, 2)),
", ",
p,
")",
sep = "")
}
if("z.ratio" %in% colnames(summary_table)) {
output <- paste(
sex,
", HC - PD: (",
"z = (",
as.numeric(round(summary_table$z.ratio, 2)),
", ",
p,
")",
sep = "")
}
return(output)
}
# APA Reporting
apa_s1_emmPairs(pairs(emms_group),
sex = "F",
Condition = "conv")
apa_s1_emmPairs(pairs(emms_group),
sex = "M",
Condition = "conv")
aiMeasures <- rio::import(file = "Data/PreppedData/CollatedData/TargetMeasures_aiMeasures.csv") %>%
#dplyr::filter(condition == "conv") %>%
dplyr::mutate(Sex = factor(Sex, levels = c("M","F")),
condition = factor(condition,
levels = c("conv",
"moreClear",
"lessClear")))
modelData <- aiMeasures
# Taking out the trash
rm(aiMeasures)
# Building the model
acoDistance_m0 <- lmerTest::lmer(acoDistance ~ 1 +
(1 | StudyID),
data = modelData)
# Model summary
summary(acoDistance_m0)
# Building the model
acoDistance_m1 <- lmerTest::lmer(acoDistance ~ condition +
(1 | StudyID),
data = modelData)
# Model summary
summary(acoDistance_m1)
# Perform likelihood ratio test
anova(acoDistance_m0, acoDistance_m1)
# Building the model
acoDistance_m2 <- lmerTest::lmer(acoDistance ~ condition*Group +
(1 | StudyID),
data = modelData)
# Model summary
summary(acoDistance_m2)
# Perform likelihood ratio test
anova(acoDistance_m1, acoDistance_m2)
# Building the model
acoDistance_m3 <- lmerTest::lmer(acoDistance ~ condition*Group*Sex +
(1 | StudyID),
data = modelData)
# Model summary
summary(acoDistance_m3)
# Perform likelihood ratio test
anova(acoDistance_m2, acoDistance_m3)
acoDistance_finalModel <- acoDistance_m3
summary(acoDistance_finalModel)
# Compute EMMs for Group and Sex
emms_group <- emmeans(acoDistance_finalModel, ~ Group | Sex*condition)
emms_condition <- emmeans(acoDistance_finalModel, ~ condition | Sex*Group)
# Compute EMMs for Group and Sex
emms_group <- emmeans(acoDistance_finalModel, ~ Group | Sex*condition)
emms_condition <- emmeans(acoDistance_finalModel, ~ condition | Sex*Group)
# APA Reporting
apa_s1_emmPairs(pairs(emms_group),
sex = "F",
Condition = "conv")
apa_s1_emmPairs(pairs(emms_group),
sex = "M",
Condition = "conv")
aiMeasures <- rio::import(file = "Data/PreppedData/CollatedData/TargetMeasures_aiMeasures.csv") %>%
dplyr::mutate(Sex = factor(Sex, levels = c("M","F")))
modelData <- aiMeasures
# Taking out the trash
rm(aiMeasures)
# Building the model
F2_Slope_m0 <- lmerTest::lmer(F2_Slope ~ 1 +
(1 | StudyID),
data = modelData)
# Model summary
summary(F2_Slope_m0)
# Building the model
F2_Slope_m1 <- lmerTest::lmer(F2_Slope ~ condition +
(1 | StudyID),
data = modelData)
# Model summary
summary(F2_Slope_m1)
# Perform likelihood ratio test
anova(F2_Slope_m0, F2_Slope_m1)
# Building the model
F2_Slope_m2 <- lmerTest::lmer(F2_Slope ~ condition*Group +
(1 | StudyID),
data = modelData)
# Model summary
summary(F2_Slope_m2)
# Perform likelihood ratio test
anova(F2_Slope_m1, F2_Slope_m2)
# Building the model
F2_Slope_m3 <- lmerTest::lmer(F2_Slope ~ condition*Group*Sex +
(1 | StudyID),
data = modelData)
# Model summary
summary(F2_Slope_m3)
# Perform likelihood ratio test
anova(F2_Slope_m2, F2_Slope_m3)
F2_Slope_finalModel <- F2_Slope_m3
summary(F2_Slope_finalModel)
# Saving the model
base::saveRDS(
object = F2_Slope_finalModel,
file = "Data/Models/Study 1/F2_Slope_finalModel.rds")
# Compute EMMs for Group and Sex
emms_group <- emmeans(F2_Slope_finalModel, ~ Group | Sex*condition)
emms_condition <- emmeans(F2_Slope_finalModel, ~ condition | Sex*Group)
# APA Reporting
apa_s1_emmPairs(pairs(emms_group),
sex = "F",
Condition = "conv")
apa_s1_emmPairs(pairs(emms_group),
sex = "M",
Condition = "conv")
# Compute EMMs for Group and Sex
emms_group <- emmeans(aVSA_finalModel, ~ Group | Sex*condition)
emms_condition <- emmeans(aVSA_finalModel, ~ condition | Sex*Group)
# APA Reporting
apa_s1_emmPairs(pairs(emms_group),
sex = "F",
Condition = "conv")
# APA Reporting
apa_s1_emmPairs(pairs(emms_group),
sex = "F",
Condition = "conv")
apa_s1_emmPairs(pairs(emms_group),
sex = "M",
Condition = "conv")
pairs(emms_group)
?emmeans
# Compute EMMs for Group and Sex
emms_group <- emmeans(aVSA_finalModel, ~ Group | Sex*condition, adjust = "bonferroni")
emms_condition <- emmeans(aVSA_finalModel, ~ condition | Sex*Group)
# Compare EMMs for Group and Sex
pairs(emms_group)
# APA Reporting
apa_s1_emmPairs(pairs(emms_group),
sex = "F",
Condition = "conv")
# Compute EMMs for Group and Sex
emms_group <- emmeans(aVSA_finalModel, ~ Group | Sex*condition, adjust = "none")
# Compare EMMs for Group and Sex
pairs(emms_group)
# APA Reporting
apa_s1_emmPairs(pairs(emms_group),
sex = "F",
Condition = "conv")
# Compute EMMs for Group and Sex
emms_group <- emmeans(aVSA_finalModel, ~ Group | Sex*condition)
# Compare EMMs for Group and Sex
pairs(emms_group)
# APA Reporting
apa_s1_emmPairs(pairs(emms_group),
sex = "F",
Condition = "conv")
apa_s1_emmPairs(pairs(emms_group),
sex = "M",
Condition = "conv")
vsa <- rio::import(file = "Data/PreppedData/CollatedData/allSpeakers_tempMid.csv") %>%
dplyr::mutate(rep = base::sub(pattern = ".*[.]",
replacement = "",
x = phrase),
rep = as.numeric(rep) + 1,
rep = case_when(
is.na(rep) ~ 1,
TRUE ~ rep,
),
phrase = base::sub(pattern = "[.].*",
replacement = "",
x = phrase)) %>%
dplyr::rename(F1 = F1_tempMid,
F2 = F2_tempMid,
TB_x = TB_x_tempMid,
TB_y = TB_y_tempMid,
cTB_x = cTB_x_tempMid,
cTB_y = cTB_y_tempMid,
) %>%
dplyr::group_by(DatabaseID,
Group,
condition,
label,
) %>%
dplyr::summarise(F1 = mean(F1, na.rm = T),
F2 = mean(F2, na.rm = T),
TB_x = mean(TB_x, na.rm = T),
TB_y = mean(TB_y, na.rm = T),
cTB_x = mean(cTB_x, na.rm = T),
cTB_y = mean(cTB_y, na.rm = T),
) %>%
dplyr::group_by(
DatabaseID,
Group,
condition,
) %>%
# The cHull function calculates the VSA
dplyr::summarise(aVSA = cHull(F2, F1),
kVSA = cHull(TB_x, TB_y),
kVSA_centered = cHull(cTB_x, cTB_y),
)
vsa <- rio::import(file = "Data/PreppedData/CollatedData/allSpeakers_tempMid.csv") %>%
dplyr::mutate(rep = base::sub(pattern = ".*[.]",
replacement = "",
x = phrase),
rep = as.numeric(rep) + 1,
rep = case_when(
is.na(rep) ~ 1,
TRUE ~ rep,
),
phrase = base::sub(pattern = "[.].*",
replacement = "",
x = phrase))
View(vsa)
vsa <- rio::import(file = "Data/PreppedData/CollatedData/allSpeakers_tempMid.csv") %>%
dplyr::mutate(rep = base::sub(pattern = ".*[.]",
replacement = "",
x = phrase),
rep = as.numeric(rep) + 1,
rep = case_when(
is.na(rep) ~ 1,
TRUE ~ rep,
),
phrase = base::sub(pattern = "[.].*",
replacement = "",
x = phrase)) %>%
dplyr::rename(F1 = F1_tempMid,
F2 = F2_tempMid,
TB_x = TB_x_tempMid,
TB_y = TB_y_tempMid,
) %>%
dplyr::group_by(DatabaseID,
Group,
condition,
label,
) %>%
dplyr::summarise(F1 = mean(F1, na.rm = T),
F2 = mean(F2, na.rm = T),
TB_x = mean(TB_x, na.rm = T),
TB_y = mean(TB_y, na.rm = T),
cTB_x = mean(cTB_x, na.rm = T),
cTB_y = mean(cTB_y, na.rm = T),
) %>%
dplyr::group_by(
DatabaseID,
Group,
condition,
) %>%
# The cHull function calculates the VSA
dplyr::summarise(aVSA = cHull(F2, F1),
kVSA = cHull(TB_x, TB_y),
kVSA_centered = cHull(cTB_x, cTB_y),
)
vsa <- rio::import(file = "Data/PreppedData/CollatedData/allSpeakers_tempMid.csv") %>%
dplyr::mutate(rep = base::sub(pattern = ".*[.]",
replacement = "",
x = phrase),
rep = as.numeric(rep) + 1,
rep = case_when(
is.na(rep) ~ 1,
TRUE ~ rep,
),
phrase = base::sub(pattern = "[.].*",
replacement = "",
x = phrase)) %>%
dplyr::rename(F1 = F1_tempMid,
F2 = F2_tempMid,
TB_x = TB_x_tempMid,
TB_y = TB_y_tempMid,
) %>%
dplyr::group_by(DatabaseID,
Group,
condition,
label,
) %>%
dplyr::summarise(F1 = mean(F1, na.rm = T),
F2 = mean(F2, na.rm = T),
TB_x = mean(TB_x, na.rm = T),
TB_y = mean(TB_y, na.rm = T),
) %>%
dplyr::group_by(
DatabaseID,
Group,
condition,
) %>%
# The cHull function calculates the VSA
dplyr::summarise(aVSA = cHull(F2, F1),
kVSA = cHull(TB_x, TB_y),
)
vsa <- rio::import(file = "Data/PreppedData/CollatedData/allSpeakers_tempMid.csv") %>%
dplyr::mutate(rep = base::sub(pattern = ".*[.]",
replacement = "",
x = phrase),
rep = as.numeric(rep) + 1,
rep = case_when(
is.na(rep) ~ 1,
TRUE ~ rep,
),
phrase = base::sub(pattern = "[.].*",
replacement = "",
x = phrase))
cd <- rio::import(file = "Data/PreppedData/CollatedData/allSpeakers_tempMid.csv") %>%
dplyr::mutate(rep = base::sub(pattern = ".*[.]",
replacement = "",
x = phrase),
rep = as.numeric(rep) + 1,
rep = case_when(
is.na(rep) ~ 1,
TRUE ~ rep,
),
phrase = base::sub(pattern = "[.].*",
replacement = "",
x = phrase)) %>%
dplyr::rename(F1 = F1_tempMid,
F2 = F2_tempMid,
TB_x = TB_x_tempMid,
TB_y = TB_y_tempMid,
)
cd <- rio::import(file = "Data/PreppedData/CollatedData/allSpeakers_tempMid.csv") %>%
dplyr::mutate(rep = base::sub(pattern = ".*[.]",
replacement = "",
x = phrase),
rep = as.numeric(rep) + 1,
rep = case_when(
is.na(rep) ~ 1,
TRUE ~ rep,
),
phrase = base::sub(pattern = "[.].*",
replacement = "",
x = phrase)) %>%
dplyr::rename(F1 = F1_tempMid,
F2 = F2_tempMid,
TB_x = TB_x_tempMid,
TB_y = TB_y_tempMid,
)
centers <- cd %>%
dplyr::group_by(DatabaseID,
Group,
condition,
label,
) %>%
dplyr::summarise(F1 = mean(F1, na.rm = T),
F2 = mean(F2, na.rm = T),
TB_x = mean(TB_x, na.rm = T),
TB_y = mean(TB_y, na.rm = T),
)
View(centers)
centers <- cd %>%
dplyr::group_by(DatabaseID,
Group,
condition,
label,
) %>%
dplyr::summarise(F1 = mean(F1, na.rm = T),
F2 = mean(F2, na.rm = T),
TB_x = mean(TB_x, na.rm = T),
TB_y = mean(TB_y, na.rm = T),
) %>%
dplyr::group_by(DatabaseID,
Group,
condition,
) %>%
dplyr::summarise(
cF1 = mean(F1, na.rm = T),
cF2 = mean(F2, na.rm = T),
cTB_x = mean(TB_x, na.rm = T),
cTB_y = mean(TB_y, na.rm = T),
)
View(cd)
centers <- cd %>%
dplyr::group_by(DatabaseID,
Group,
condition,
label,
) %>%
dplyr::summarise(F1 = mean(F1, na.rm = T),
F2 = mean(F2, na.rm = T),
TB_x = mean(TB_x, na.rm = T),
TB_y = mean(TB_y, na.rm = T),
) %>%
dplyr::group_by(DatabaseID,
Group,
condition,
) %>%
dplyr::summarise(
cF1 = mean(F1, na.rm = T),
cF2 = mean(F2, na.rm = T),
cTB_x = mean(TB_x, na.rm = T),
cTB_y = mean(TB_y, na.rm = T),
) %>%
dplyr::mutate(cTB_x = ifelse(cTB_x == "NaN",NA,cTB_x))
centers <- cd %>%
dplyr::group_by(DatabaseID,
Group,
condition,
label,
) %>%
dplyr::summarise(F1 = mean(F1, na.rm = T),
F2 = mean(F2, na.rm = T),
TB_x = mean(TB_x, na.rm = T),
TB_y = mean(TB_y, na.rm = T),
) %>%
dplyr::group_by(DatabaseID,
Group,
condition,
) %>%
dplyr::summarise(
cF1 = mean(F1, na.rm = T),
cF2 = mean(F2, na.rm = T),
cTB_x = mean(TB_x, na.rm = T),
cTB_y = mean(TB_y, na.rm = T),
) %>%
dplyr::mutate(cTB_x = ifelse(cTB_x == "NaN",NA,cTB_x),
cTB_y = ifelse(cTB_y == "NaN",NA,cTB_y),)
