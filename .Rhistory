sep = "")
}
return(output)
}
apa_s2_emmPairs <- function(emmsPair, Sex_Input, Group_Input, Contrast_Input) {
summary_table <- summary(emmsPair, infer = TRUE) %>%
dplyr::filter(Sex == Sex_Input) %>%
dplyr::filter(Group == Group_Input) %>%
dplyr::filter(contrast == Contrast_Input)
if(summary_table$p.value < .001) {
p <- "p<.001"
} else {
p <- paste0("p=",
round(summary_table$p.value, digits = 3))
}
if("t.ratio" %in% colnames(summary_table)) {
output <- paste(
Sex_Input,
", ",
Group_Input,
", ",
Contrast_Input,
": (",
"t(",
round(summary_table$df, digits = 2),
")=",
as.numeric(round(summary_table$t.ratio, 2)),
", ",
p,
")",
sep = "")
}
if("z.ratio" %in% colnames(summary_table)) {
output <- paste(
Sex_Input,
", ",
Group_Input,
", ",
Contrast_Input,
": (",
"z=",
as.numeric(round(summary_table$z.ratio, 2)),
", ",
p,
")",
sep = "")
}
return(output)
}
vsaMeasures <- rio::import(file = "../Data/PreppedData/CollatedData/TargetMeasures_vsaMeasures.csv") %>%
dplyr::mutate(Sex = factor(Sex, levels = c("M","F")),
aVSA = aVSA/1000)
corrr::correlate(vsaMeasures %>% dplyr::select(Int_M, AP_M, aVSA, kVSA))
aiMeasures <- rio::import(file = "../Data/PreppedData/CollatedData/TargetMeasures_aiMeasures.csv") %>%
dplyr::mutate(Sex = factor(Sex, levels = c("M","F")))
corTable <- corrr::correlate(aiMeasures %>% dplyr::select(Int_M, AP_M, acoDistance, F2_Slope, kinDistance, TB_speedMax), method = "pearson")
stats::cor.test(x = vsaMeasures$aVSA,
y = vsaMeasures$kVSA,
method = "pearson")
vsaMeasures <- rio::import(file = "../Data/PreppedData/CollatedData/TargetMeasures_vsaMeasures.csv") %>%
dplyr::mutate(Sex = factor(Sex, levels = c("M","F")),
aVSA = aVSA/1000)
modelData <- vsaMeasures
# Taking out the trash
rm(vsaMeasures)
# Building the model
Int_VSA_m0 <- lmerTest::lmer(Int_M ~ 1 +
(1 | StudyID),
data = modelData)
# Model summary
summary(Int_VSA_m0)
# Building the model
Int_VSA_m1 <- lmerTest::lmer(Int_M ~ aVSA +
(1 | StudyID),
data = modelData)
# Model summary
summary(Int_VSA_m1)
# Perform likelihood ratio test
anova(Int_VSA_m0, Int_VSA_m1)
# Building the model
Int_VSA_m2 <- lmerTest::lmer(Int_M ~ aVSA +
kVSA +
(1 | StudyID),
data = modelData)
# Model summary
summary(Int_VSA_m2)
# Perform likelihood ratio test
#anova(Int_VSA_m1, Int_VSA_m2)
# Building the model
Int_VSA_m3 <- lmerTest::lmer(Int_M ~ aVSA +
kVSA +
Sex +
(1 | StudyID),
data = modelData)
# Model summary
summary(Int_VSA_m3)
# Perform likelihood ratio test
#anova(Int_VSA_m1, Int_VSA_m3)
# Building the model
Int_VSA_m4 <- lmerTest::lmer(Int_M ~ aVSA*Sex +
kVSA*Sex +
(1 | StudyID),
data = modelData)
# Model summary
summary(Int_VSA_m4)
# Perform likelihood ratio test
anova(Int_VSA_m3, Int_VSA_m4)
# Building the model
Int_VSA_m5 <- lmerTest::lmer(Int_M ~ aVSA*Sex +
(1 | StudyID),
data = modelData)
# Model summary
summary(Int_VSA_m5)
# Perform likelihood ratio test
anova(Int_VSA_m1, Int_VSA_m5)
Int_VSA_finalModel <- Int_VSA_m5
summary(Int_VSA_finalModel)
# Obtain R-squared values using r.squaredGLMM
r_squared <- MuMIn::r.squaredGLMM(Int_VSA_finalModel)
# Compare the R-squared values
cat("R-squared for this model is", r_squared, "\n")
emms <- emmeans(Int_VSA_finalModel, ~ Sex)
# Compare EMMs for Condition and Sex
pairs(emms,
adjust = "Tukey"
)
sjPlot::tab_model(
Int_VSA_m1,
Int_VSA_m2,
#Int_VSA_m3,
Int_VSA_m4,
Int_VSA_m5,
file = "Tables/Table S1_Int VSA Model.html"
)
aiMeasures <- rio::import(file = "Data/PreppedData/CollatedData/TargetMeasures_aiMeasures.csv") %>%
dplyr::mutate(Sex = factor(Sex, levels = c("M","F")))
aiMeasures <- rio::import(file = "../Data/PreppedData/CollatedData/TargetMeasures_aiMeasures.csv") %>%
dplyr::mutate(Sex = factor(Sex, levels = c("M","F")))
modelData <- aiMeasures
# Taking out the trash
rm(aiMeasures)
# Building the model
Int_ai_m0 <- lmerTest::lmer(Int_M ~ 1 +
(1 | StudyID),
data = modelData)
# Model summary
summary(Int_ai_m0)
# Building the model
Int_ai_m1 <- lmerTest::lmer(Int_M ~ acoDistance +
(1 | StudyID),
data = modelData)
# Model summary
summary(Int_ai_m1)
# Perform likelihood ratio test
anova(Int_ai_m0, Int_ai_m1)
# Building the model
Int_ai_m2 <- lmerTest::lmer(Int_M ~ acoDistance +
F2_Slope +
(1 | StudyID),
data = modelData)
# Model summary
summary(Int_ai_m2)
# Perform likelihood ratio test
anova(Int_ai_m1, Int_ai_m2)
# Building the model
Int_ai_m3 <- lmerTest::lmer(Int_M ~ acoDistance +
F2_Slope +
kinDistance +
(1 | StudyID),
data = modelData)
# Model summary
summary(Int_ai_m3)
# Perform likelihood ratio test
#anova(Int_ai_m2, Int_ai_m3)
# Building the model
Int_ai_m4 <- lmerTest::lmer(Int_M ~ acoDistance +
F2_Slope +
kinDistance +
TB_speedMax +
(1 | StudyID),
data = modelData)
# Model summary
summary(Int_ai_m4)
# Perform likelihood ratio test
#anova(Int_ai_m3, Int_ai_m4)
# Building the model
Int_ai_m5 <- lmerTest::lmer(Int_M ~ acoDistance*Sex +
F2_Slope*Sex +
kinDistance*Sex +
TB_speedMax*Sex +
(1 | StudyID),
data = modelData)
# Model summary
summary(Int_ai_m5)
# Perform likelihood ratio test
anova(Int_ai_m4, Int_ai_m5)
# Building the model
Int_ai_m6 <- lmerTest::lmer(Int_M ~ acoDistance*Sex +
#F2_Slope*Sex +
kinDistance*Sex +
#TB_speedMax*Sex +
(1 | StudyID),
data = modelData)
# Model summary
summary(Int_ai_m6)
# Perform likelihood ratio test
#anova(Int_ai_m5, Int_ai_m6)
# Building the model
Int_ai_m7 <- lmerTest::lmer(Int_M ~ kinDistance + Sex +
(1 | StudyID),
data = modelData)
# Model summary
summary(Int_ai_m7)
# Perform likelihood ratio test
anova(Int_ai_m6, Int_ai_m7)
# Building the model
Int_ai_m8 <- lmerTest::lmer(Int_M ~ kinDistance*Sex +
(1 | StudyID),
data = modelData)
# Model summary
summary(Int_ai_m8)
# Perform likelihood ratio test
anova(Int_ai_m7, Int_ai_m8)
# Building the model
Int_ai_m5 <- lmerTest::lmer(Int_M ~ acoDistance*Sex +
F2_Slope*Sex +
kinDistance*Sex +
TB_speedMax*Sex +
(1 | StudyID),
data = modelData)
# Model summary
summary(Int_ai_m5)
# Perform likelihood ratio test
anova(Int_ai_m4, Int_ai_m5)
# Building the model
Int_ai_m6 <- lmerTest::lmer(Int_M ~ acoDistance*Sex +
#F2_Slope*Sex +
kinDistance*Sex +
#TB_speedMax*Sex +
(1 | StudyID),
data = modelData)
# Model summary
summary(Int_ai_m6)
# Perform likelihood ratio test
#anova(Int_ai_m5, Int_ai_m6)
# Building the model
Int_ai_m7 <- lmerTest::lmer(Int_M ~ kinDistance + Sex +
(1 | StudyID),
data = modelData)
# Model summary
summary(Int_ai_m7)
# Perform likelihood ratio test
anova(Int_ai_m6, Int_ai_m7)
# Building the model
Int_ai_m8 <- lmerTest::lmer(Int_M ~ kinDistance*Sex +
(1 | StudyID),
data = modelData)
# Model summary
summary(Int_ai_m8)
# Perform likelihood ratio test
anova(Int_ai_m7, Int_ai_m8)
Int_ai_finalModel <- Int_ai_m7
summary(Int_ai_finalModel)
sjPlot::tab_model(
Int_ai_m1,
Int_ai_m2,
Int_ai_m3,
Int_ai_m4,
Int_ai_m5,
#Int_ai_m6,
Int_ai_m7,
show.ci = F,
file = "Tables/Table S2_Int Diphthong Model.html"
)
vsaMeasures <- rio::import(file = "../Data/PreppedData/CollatedData/TargetMeasures_vsaMeasures.csv") %>%
dplyr::mutate(Sex = factor(Sex, levels = c("M","F")),
aVSA = aVSA/1000)
modelData <- vsaMeasures
# Taking out the trash
rm(vsaMeasures)
# Building the model
AP_VSA_m0 <- lmerTest::lmer(AP_M ~ 1 +
(1 | StudyID),
data = modelData)
# Model summary
summary(AP_VSA_m0)
# Building the model
AP_VSA_m1 <- lmerTest::lmer(AP_M ~ aVSA +
(1 | StudyID),
data = modelData)
# Model summary
summary(AP_VSA_m1)
# Perform likelihood ratio test
anova(AP_VSA_m0, AP_VSA_m1)
# Building the model
AP_VSA_m2 <- lmerTest::lmer(AP_M ~ aVSA +
kVSA +
(1 | StudyID),
data = modelData)
# Model summary
summary(AP_VSA_m2)
# Perform likelihood ratio test
#anova(AP_VSA_m1, AP_VSA_m2)
# Building the model
AP_VSA_m3 <- lmerTest::lmer(AP_M ~ aVSA + kVSA + Sex +
(1 | StudyID),
data = modelData)
# Model summary
summary(AP_VSA_m3)
# Perform likelihood ratio test
#anova(AP_VSA_m1, AP_VSA_m3)
# Building the model
AP_VSA_m4 <- lmerTest::lmer(AP_M ~ aVSA*Sex +
kVSA*Sex +
(1 | StudyID),
data = modelData)
# Model summary
summary(AP_VSA_m4)
# Perform likelihood ratio test
anova(AP_VSA_m3, AP_VSA_m4)
# Building the model
AP_VSA_m5 <- lmerTest::lmer(AP_M ~ aVSA*Sex +
(1 | StudyID),
data = modelData)
# Model summary
summary(AP_VSA_m5)
# Perform likelihood ratio test
#anova(AP_VSA_m4, AP_VSA_m5)
AP_VSA_finalModel <- AP_VSA_m5
summary(AP_VSA_finalModel)
emms_sex <- emmeans(AP_VSA_finalModel, ~ Sex)
# Compare EMMs for Condition and Sex
pairs(emms_sex,
adjust = "Tukey"
)
sjPlot::tab_model(
AP_VSA_m1,
AP_VSA_m2,
#AP_VSA_m3,
AP_VSA_m4,
AP_VSA_m5,
file = "Tables/Table S3_AP VSA Model.html"
)
aiMeasures <- rio::import(file = "../Data/PreppedData/CollatedData/TargetMeasures_aiMeasures.csv") %>%
dplyr::mutate(Sex = factor(Sex, levels = c("M","F")))
modelData <- aiMeasures
# Taking out the trash
rm(aiMeasures)
# Building the model
AP_ai_m0 <- lmerTest::lmer(AP_M ~ 1 +
(1 | StudyID),
data = modelData)
# Model summary
summary(AP_ai_m0)
# Building the model
AP_ai_m1 <- lmerTest::lmer(AP_M ~ acoDistance +
(1 | StudyID),
data = modelData)
# Model summary
summary(AP_ai_m1)
# Perform likelihood ratio test
anova(AP_ai_m0, AP_ai_m1)
# Building the model
AP_ai_m2 <- lmerTest::lmer(AP_M ~ acoDistance +
F2_Slope +
(1 | StudyID),
data = modelData)
# Model summary
summary(AP_ai_m2)
# Perform likelihood ratio test
anova(AP_ai_m1, AP_ai_m2)
# Building the model
AP_ai_m3 <- lmerTest::lmer(AP_M ~ acoDistance +
F2_Slope +
kinDistance +
(1 | StudyID),
data = modelData)
# Model summary
summary(AP_ai_m3)
# Perform likelihood ratio test
#anova(AP_ai_m2, AP_ai_m3)
# Building the model
AP_ai_m4 <- lmerTest::lmer(AP_M ~ acoDistance +
F2_Slope +
kinDistance +
TB_speedMax +
(1 | StudyID),
data = modelData)
# Model summary
summary(AP_ai_m4)
# Perform likelihood ratio test
#anova(AP_ai_m3, AP_ai_m4)
performance::check_collinearity(AP_ai_m4)
# Building the model
AP_ai_m5 <- lmerTest::lmer(AP_M ~ acoDistance*Sex +
F2_Slope*Sex +
kinDistance*Sex +
TB_speedMax*Sex +
(1 | StudyID),
data = modelData)
# Model summary
summary(AP_ai_m5)
# Perform likelihood ratio test
anova(AP_ai_m4, AP_ai_m5)
# Building the model
AP_ai_m6 <- lmerTest::lmer(AP_M ~ kinDistance*Sex +
(1 | StudyID),
data = modelData)
# Model summary
summary(AP_ai_m6)
# Perform likelihood ratio test
#anova(AP_ai_m5, AP_ai_m6)
# Building the model
AP_ai_m7 <- lmerTest::lmer(AP_M ~ kinDistance + Sex +
(1 | StudyID),
data = modelData)
# Model summary
summary(AP_ai_m7)
# Perform likelihood ratio test
anova(AP_ai_m6, AP_ai_m7)
AP_ai_finalModel <- AP_ai_m7
summary(AP_ai_finalModel)
sjPlot::tab_model(
AP_ai_m1,
AP_ai_m2,
AP_ai_m3,
AP_ai_m4,
AP_ai_m5,
AP_ai_m7,
show.ci = F,
file = "Tables/Table S4_AP Diphthong Model.html"
)
sjPlot::tab_model(
Int_VSA_finalModel,
AP_VSA_finalModel,
file = "Tables/Table S5_VSA Final Model Table.html"
)
sjPlot::tab_model(
Int_ai_finalModel,
AP_ai_finalModel,
file = "Tables/Table S6_Diphthong Final Model Table.html"
)
# VSA ----
## Fit model 1
model1 <- Int_VSA_finalModel
## Fit model 2
model2 <- AP_VSA_finalModel
## Compare R-squared values
r_squared1 <- summary(model1)$r.squared
r_squared2 <- summary(model2)$r.squared
## Compare the R-squared values
cat("R-squared for model 1:", r_squared1, "\n")
cat("R-squared for model 2:", r_squared2, "\n")
# kinDistance ----
library(MuMIn) # install.packages('MuMIn')
## Fit model 1
model1 <- Int_ai_finalModel
## Fit model 2
model2 <- AP_ai_finalModel
## Compare R-squared values
r_squared1 <- MuMIn::r.squaredGLMM(model1)[2]
r_squared2 <- MuMIn::r.squaredGLMM(model2)[2]
## Compare the R-squared values
cat("R-squared for model 1 (Int):", r_squared1, "\n")
cat("R-squared for model 2 (AP):", r_squared2, "\n")
r_squared1
# VSA ----
## Fit model 1
model1 <- Int_VSA_finalModel
## Fit model 2
model2 <- AP_VSA_finalModel
## Compare R-squared values
r_squared1 <- summary(model1)$r.squared
r_squared2 <- summary(model2)$r.squared
## Compare the R-squared values
cat("R-squared for model 1:", r_squared1, "\n")
cat("R-squared for model 2:", r_squared2, "\n")
# kinDistance ----
library(MuMIn) # install.packages('MuMIn')
## Fit model 1
model1 <- Int_ai_finalModel
## Fit model 2
model2 <- AP_ai_finalModel
## Compare R-squared values
r_squared1 <- MuMIn::r.squaredGLMM(model1)[2]
r_squared2 <- MuMIn::r.squaredGLMM(model2)[2]
## Compare the R-squared values
cat("R-squared for model 1 (Int):", r_squared1, "\n")
cat("R-squared for model 2 (AP):", r_squared2, "\n")
r_squared2
# VSA ----
## Fit model 1
model1 <- Int_VSA_finalModel
## Fit model 2
model2 <- AP_VSA_finalModel
## Compare R-squared values
r_squared1 <- summary(model1)$r.squared
r_squared2 <- summary(model2)$r.squared
## Compare the R-squared values
cat("R-squared for model 1:", r_squared1, "\n")
cat("R-squared for model 2:", r_squared2, "\n")
# VSA ----
## Fit model 1
model1 <- Int_VSA_finalModel
## Fit model 2
model2 <- AP_VSA_finalModel
## Compare R-squared values
r_squared1 <- summary(model1)$r.squared
r_squared2 <- summary(model2)$r.squared
## Compare the R-squared values
cat("R-squared for model 1:", r_squared1, "\n")
cat("R-squared for model 2:", r_squared2, "\n")
