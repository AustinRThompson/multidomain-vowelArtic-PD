color = group,
group = group
),
position = position_dodge(width = .45),
width = 0,
) +
# Point
geom_point(
aes(color = group,
group = group),
position = position_dodge(width = .45)
) +
# Adding significance bars - HC*Condition ----
ggsignif::geom_signif(data = data.frame(Group = c("Less\nClear",
"Conv",
"More\nClear")),
aes(y_position = c(rep(lim_condition_HC_aVSA, 6)),
xmin = c(1.1, 2.1, NA, 1.1, 2.1, NA),
xmax = c(1.9, 2.9, NA, 1.9, 2.9, NA),
annotations = c(NA, NA, NA, NA, "*", NA),
group=c(1,2,3,4,5,6)),
vjust = .5,
color = color_HC,
tip_length = 0,
manual = T) +
# Adding significance bars - Group ----
ggsignif::geom_signif(data = data.frame(Group = c("Less\nClear",
"Conv",
"More\nClear")),
aes(y_position = c(rep(lim_group_aVSA, 6)),
xmin = c(.9, 1.9, 2.9, .9, 1.9, 2.9),
xmax = c(1.1, 2.1, 3.1, 1.1, 2.1, 3.1),
annotations = c(NA, NA, NA, "*", NA, "*"),
group=c(1,2,3,4,5,6)),
vjust = .5,
color = "black",
tip_length = 0,
manual = T) +
# Facet by Sex
facet_grid(~facet) +
# Changing the y axis scale
coord_cartesian(ylim = lim_y_aVSA-65) +
#scale_y_continuous(breaks=c(0, 25, 50, 75, 100)) +
# Changing the theme, labels, and title
theme_minimal() +
labs(y = bquote('Hz'^2),
color = "Group") +
ggtitle("Acoustic VSA") +
theme(
aspect.ratio = 1.333333,
plot.title = element_text(hjust = 0.5),
#axis.text.x = element_blank(),
#axis.ticks.x = element_blank(),
axis.title.x = element_blank(),
panel.border = element_rect(fill = NA, color = "black"),
legend.position = "none"
) +
# Color Palate
scale_color_manual(values = c(color_HC,color_PD)) +
scale_fill_manual(values = c(color_HC,color_PD))
plot_aVSA
model <- base::readRDS("Data/Models/Study 1/kVSA_finalModel.rds") %>%
sjPlot::plot_model(type = "int")
plotData <- model[[4]][["data"]] %>%
as.data.frame() %>%
dplyr::mutate(
condition = factor(x,
levels = c(3, 1, 2),
labels = c("Less\nClear",
"Conv",
"More\nClear")),
facet = factor(facet,
levels = c("M", "F"),
labels = c("Male Speakers", "Female Speakers")))
lim_y_kVSA <- c(0,
(base::max(plotData$conf.high) + base::max(plotData$conf.high)*.45))
lim_group_kVSA <- base::max(plotData$conf.high) + base::max(plotData$conf.high)*.10
lim_condition_HC_kVSA <- base::max(plotData$conf.high) + base::max(plotData$conf.high)*.25
lim_condition_PD_kVSA <- base::max(plotData$conf.high) + base::max(plotData$conf.high)*.40
# Making the Plot
plot_kVSA <- plotData %>%
ggplot() +
aes(y = predicted,
x = condition,
group = group,
color = group) +
# Line
geom_line(
aes(color = group,
group = group),
position = position_dodge(width = .45),
alpha = .6,
) +
# Error Bars
geom_errorbar(aes(
ymin = conf.low,
ymax = conf.high,
color = group,
group = group
),
position = position_dodge(width = .45),
width = 0,
) +
# Point
geom_point(
aes(color = group,
group = group),
position = position_dodge(width = .45)
) +
# Facet by Sex ----
facet_grid(~facet) +
# Changing the y axis scale
coord_cartesian(ylim = lim_y_kVSA) +
# Changing the theme, labels, and title
theme_minimal() +
labs(y = bquote('mm'^2),
color = "Group") +
ggtitle("Kinematic VSA") +
theme(
aspect.ratio = 1.333333,
plot.title = element_text(hjust = 0.5),
#axis.text.x = element_blank(),
#axis.ticks.x = element_blank(),
axis.title.x = element_blank(),
panel.border = element_rect(fill = NA, color = "black"),
) +
# Color Palate
scale_color_manual(values = c(color_HC,color_PD)) +
scale_fill_manual(values = c(color_HC,color_PD))
plot_kVSA
library(patchwork)
# Perceptual Plots
plot_s2_perceptual <- ggarrange(plot_Int,plot_AP,
common.legend = T,
legend = "bottom")
plot_s2_perceptual
dir.create(path = "Data/Plots/Results",
showWarnings = F)
ggsave(filename = "Results_perceptual.png",
plot = plot_s2_perceptual,
path = "Data/Plots/Results",
height = 3.3,
width = 6.5,
scale = 1,
bg = "white")
# Acoustic Plots
plot_s2_acoustic <- plot_aVSA + patchwork::plot_spacer() + plot_acoDistance +
plot_F2_Slope + patchwork::plot_spacer() + patchwork::guide_area() +
patchwork::plot_layout(
widths = c(1, -.075, 1),
guides = "collect",
#design = "
#        AABB
#        CCDD"
)
plot_s2_acoustic
dir.create(path = "Data/Plots/Results",
showWarnings = F)
ggsave(filename = "Results_acoustic.png",
plot = plot_s2_acoustic,
path = "Data/Plots/Results",
height = 5,
width = 6.5,
scale = 1)
# Kinematic Plots
plot_s2_kinematic <- plot_kVSA + patchwork::plot_spacer() + plot_kinDistance +
plot_TB_Speed + patchwork::plot_spacer() + patchwork::guide_area() +
patchwork::plot_layout(
widths = c(1, -.02, 1),
guides = "collect",
#design = "
#        AABB
#        CCDD",
)
plot_s2_kinematic
dir.create(path = "Data/Plots/Results",
showWarnings = F)
ggsave(filename = "Results_kinematic.png",
plot = plot_s2_kinematic,
path = "Data/Plots/Results",
height = 5,
width = 6.5,
scale = 1)
models <- list.files(path = "Data/Models/Study 1/")
k <- 1
while (k <= NROW(models)) {
targetModel <- readRDS(file = paste0("Data/Models/Study 1/",models[k]))
targetMeasure <- paste0(targetModel@call[["formula"]][[2]])
# Compute EMMs for Group and Sex
emms_group <- emmeans(targetModel, ~ Group | Sex*condition)
emms_condition <- emmeans(targetModel, ~ condition | Sex*Group)
# Compare EMMs for Group and Sex
pairs(emms_group)
pairs(emms_condition)
# Compare EMMs for Group and Sex
groupDiff <- summary(pairs(emms_group)) %>%
dplyr::rename(stat.value = 7) %>%
dplyr::mutate(
Measure = targetMeasure,
sig = ifelse(p.value < alpha_s1, TRUE, FALSE),
stat = ifelse(df == "Inf",
paste0("z="),
paste0("t=")),
apa = paste0(Sex, ", ",
condition, ", ",
contrast, ": ",
stat, round(stat.value, digits = 2), ", ",
ifelse(p.value < .001, "p<.001", paste0("p=",round(p.value, digits = 3)))),
apa = gsub(pattern = "0[.]", replacement = ".", apa)) %>%
dplyr::relocate(Measure, .before = contrast)
conditionDiff <- summary(pairs(emms_condition)) %>%
dplyr::rename(stat.value = 7) %>%
dplyr::mutate(
Measure = targetMeasure,
sig = ifelse(p.value < alpha_s1, TRUE, FALSE),
stat = ifelse(df == "Inf",
paste0("z="),
paste0("t=")),
apa = paste0(Sex, ", ",
Group, ", ",
contrast, ": ",
stat, round(stat.value, digits = 2), ", ",
ifelse(p.value < .001, "p<.001", paste0("p=",round(p.value, digits = 3)))),
apa = gsub(pattern = "0[.]", replacement = ".", apa)) %>%
dplyr::relocate(Measure, .before = contrast)
if (k == 1) {
table_groupDiff <- groupDiff
table_conditionDiff <- conditionDiff
} else {
table_groupDiff <- rbind(table_groupDiff, groupDiff)
table_conditionDiff <- rbind(table_conditionDiff, conditionDiff)
}
k <- k + 1
rm(groupDiff, conditionDiff, targetMeasure, targetModel)
}
alpha_s1 <- .05/8
# Prepping the model folders to be saved
dir.create(path = "Data/Models/",showWarnings = F)
dir.create(path = "Data/Models/Study 1",showWarnings = F)
models <- list.files(path = "Data/Models/Study 1/")
k <- 1
while (k <= NROW(models)) {
targetModel <- readRDS(file = paste0("Data/Models/Study 1/",models[k]))
targetMeasure <- paste0(targetModel@call[["formula"]][[2]])
# Compute EMMs for Group and Sex
emms_group <- emmeans(targetModel, ~ Group | Sex*condition)
emms_condition <- emmeans(targetModel, ~ condition | Sex*Group)
# Compare EMMs for Group and Sex
pairs(emms_group)
pairs(emms_condition)
# Compare EMMs for Group and Sex
groupDiff <- summary(pairs(emms_group)) %>%
dplyr::rename(stat.value = 7) %>%
dplyr::mutate(
Measure = targetMeasure,
sig = ifelse(p.value < alpha_s1, TRUE, FALSE),
stat = ifelse(df == "Inf",
paste0("z="),
paste0("t=")),
apa = paste0(Sex, ", ",
condition, ", ",
contrast, ": ",
stat, round(stat.value, digits = 2), ", ",
ifelse(p.value < .001, "p<.001", paste0("p=",round(p.value, digits = 3)))),
apa = gsub(pattern = "0[.]", replacement = ".", apa)) %>%
dplyr::relocate(Measure, .before = contrast)
conditionDiff <- summary(pairs(emms_condition)) %>%
dplyr::rename(stat.value = 7) %>%
dplyr::mutate(
Measure = targetMeasure,
sig = ifelse(p.value < alpha_s1, TRUE, FALSE),
stat = ifelse(df == "Inf",
paste0("z="),
paste0("t=")),
apa = paste0(Sex, ", ",
Group, ", ",
contrast, ": ",
stat, round(stat.value, digits = 2), ", ",
ifelse(p.value < .001, "p<.001", paste0("p=",round(p.value, digits = 3)))),
apa = gsub(pattern = "0[.]", replacement = ".", apa)) %>%
dplyr::relocate(Measure, .before = contrast)
if (k == 1) {
table_groupDiff <- groupDiff
table_conditionDiff <- conditionDiff
} else {
table_groupDiff <- rbind(table_groupDiff, groupDiff)
table_conditionDiff <- rbind(table_conditionDiff, conditionDiff)
}
k <- k + 1
rm(groupDiff, conditionDiff, targetMeasure, targetModel)
}
table_groupDiff %>%
dplyr::select(Measure:condition, estimate, SE, stat.value, df, p.value, sig) %>%
dplyr::select(!contrast) %>%
dplyr::mutate(p.value = ifelse(p.value < .001,"<.001", round(p.value, digits = 3)),
p.value = gsub(p.value, pattern = "0[.]", replacement = ".")) %>%
tidyr::pivot_wider(
names_from = Sex,
values_from = c(estimate, SE, stat.value, p.value,df, sig)
) %>%
dplyr::mutate(
condition = factor(condition,
levels = c(
"conv",
"lessClear",
"moreClear"
),
labels = c(
"Conversational",
"Less Clear",
"More Clear"
)),
Measure = factor(Measure,
levels = c(
"Int",
"AP",
"aVSA",
"acoDistance",
"F2_Slope",
"kVSA",
"kinDistance",
"TB_speedMax"
),
labels = c(
"Intelligibility (%)",
"Articulatory Precision (%)",
"Acoustic VSA (Hz^2)",
"Acoustic Distance (Hz)",
"F2 Slope (Hz/ms)",
"Kinematic VSA (mm^2)",
"Kinematic Distance (mm)",
"TB Speed (mm/s)"
))) %>%
arrange(Measure) %>%
gt::gt(
rowname_col = "condition",
groupname_col = "Measure") %>%
# Female Speakers Spanner
gt::tab_spanner(
label = "Female Speakers",
columns = c(estimate_F,
SE_F,
stat.value_F,
df_F,
p.value_F)
) %>%
# Male Speakers Spanner
gt::tab_spanner(
label = "Male Speakers",
columns = c(estimate_M,
SE_M,
stat.value_M,
df_M,
p.value_M)
) %>%
gt::fmt_number(
columns = everything(),
decimals = 2
) %>%
gt::fmt_number(
columns = c(p.value_M, p.value_F),
decimals = 3,
) %>%
gt::cols_align(align = "right",
columns = c(p.value_M, p.value_F)) %>%
# Conditionally bold M rows
gt::tab_style(style = list(gt::cell_text(weight = 'bold')),
locations = gt::cells_body(columns = c(
estimate_M,
SE_M,
stat.value_M,
df_M,
p.value_M),
rows = sig_M == TRUE)) %>%
# Conditionally bold M rows
gt::tab_style(style = list(gt::cell_text(weight = 'bold')),
locations = gt::cells_body(columns = c(
estimate_F,
SE_F,
stat.value_F,
df_F,
p.value_F),
rows = sig_F == TRUE)) %>%
# Rename Columns
gt::cols_label(
estimate_M = "Est",
SE_M = "SE",
stat.value_M = "F/Z Ratio",
df_F = "df",
p.value_M = "p",
estimate_F = "Est",
SE_F = "SE",
stat.value_F = "F/Z Ratio",
df_M = "df",
p.value_F = "p"
) %>%
gt::cols_hide(columns = c(sig_M,sig_F)) %>%
gt::tab_options(row_group.as_column = TRUE)  %>%
gt::gtsave(filename = "Data/Tables/Supplemental Info_Group Contrasts.html")
View(table_conditionDiff)
View(table_groupDiff)
# Building the model
Int_m1 <- lmerTest::lmer(Int ~ condition +
(1 | ListenerID) +
(1 | StudyID),
data = modelData)
0.037662 < alpha_s1
alpha_s1 <- .05/5
alpha_s1
vsaMeasures <- rio::import(file = "Data/PreppedData/CollatedData/TargetMeasures_vsaMeasures.csv") %>%
#dplyr::filter(condition == "conv") %>%
dplyr::mutate(Sex = factor(Sex, levels = c("M","F")),
condition = factor(condition,
levels = c("conv",
"moreClear",
"lessClear")),
aVSA = aVSA/1000)
modelData <- vsaMeasures
# Taking out the trash
rm(vsaMeasures)
# Building the model
aVSA_m0 <- lmerTest::lmer(aVSA ~ 1 +
(1 | StudyID),
data = modelData)
# Model summary
summary(aVSA_m0)
# Building the model
aVSA_m1 <- lmerTest::lmer(aVSA ~ condition +
(1 | StudyID),
data = modelData)
# Model summary
summary(aVSA_m1)
# Perform likelihood ratio test
anova(aVSA_m0, aVSA_m1)
# Building the model
aVSA_m2 <- lmerTest::lmer(aVSA ~ condition*Group +
(1 | StudyID),
data = modelData)
# Model summary
summary(aVSA_m2)
# Perform likelihood ratio test
anova(aVSA_m1, aVSA_m2)
0.037662 < alpha_s1
# Building the model
aVSA_m3 <- lmerTest::lmer(aVSA ~ condition*Group*Sex +
(1 | StudyID),
data = modelData)
# Model summary
summary(aVSA_m3)
# Perform likelihood ratio test
anova(aVSA_m2, aVSA_m3)
# Building the model
aVSA_m0 <- lmerTest::lmer(aVSA ~ 1 +
(1 | StudyID),
data = modelData)
# Model summary
summary(aVSA_m0)
# Building the model
aVSA_m1 <- lmerTest::lmer(aVSA ~ condition +
(1 | StudyID),
data = modelData)
# Model summary
summary(aVSA_m1)
# Perform likelihood ratio test
anova(aVSA_m0, aVSA_m1)
# Building the model
aVSA_m2 <- lmerTest::lmer(aVSA ~ condition*Group +
(1 | StudyID),
data = modelData)
# Model summary
summary(aVSA_m2)
# Perform likelihood ratio test
anova(aVSA_m1, aVSA_m2)
# Building the model
aVSA_m2 <- lmerTest::lmer(aVSA ~ condition*Group +
(1 | StudyID),
data = modelData %>%
dplyr::group_by(Sex) %>%
dplyr::mutate(aVSA = scale(aVSA)))
# Model summary
summary(aVSA_m2)
condition*
# Building the model
aVSA_m2 <- lmerTest::lmer(aVSA ~ condition*Group +
(1 | StudyID),
data = modelData %>%
dplyr::group_by(Sex) %>%
dplyr::mutate(aVSA = scale(aVSA)))
# Model summary
summary(aVSA_m2)
# Building the model
aVSA_m2 <- lmerTest::lmer(aVSA ~ condition*Group +
(1 | StudyID),
data = modelData)
# Model summary
summary(aVSA_m2)
# Building the model
aVSA_m2 <- lmerTest::lmer(aVSA ~ condition*Group +
(1 | StudyID),
data = modelData)
# Model summary
summary(aVSA_m2)
# Perform likelihood ratio test
anova(aVSA_m1, aVSA_m2)
# Building the model
aVSA_m3 <- lmerTest::lmer(aVSA ~ condition*Group*Sex +
(1 | StudyID),
data = modelData)
# Model summary
summary(aVSA_m3)
# Perform likelihood ratio test
anova(aVSA_m2, aVSA_m3)
